import streamlit as st
import pandas as pd
import plotly.express as px
import io

from streamlit import session_state as ss

# –¥–ª—è –¥–µ–º–æ –¥–∞—à–±–æ—Ä–¥–∞
try:
    from db.interaction import get_all_operations, update_record_by_id
    ss.df = get_all_operations()
    ss.demo = False
except ModuleNotFoundError:
    ss.demo = True
    ss.df = pd.read_excel("app/–ø—Ä–∏–º–µ—Ä—ã.xlsx")
    ss.df["–î–∞—Ç–∞"] = pd.to_datetime(ss.df["–î–∞—Ç–∞"], dayfirst=True)
    ss.df["id"] = range(len(ss.df))
    ss.df = ss.df[[ss.df.columns.tolist()[-1]] + ss.df.columns.tolist()[:-1]]


def load_session_state():
    ss.today = pd.to_datetime("today").normalize()
    if "start_date" not in ss:
        ss.start_date = ss.today
    if "end_date" not in ss:
        ss.end_date = ss.today


def create_sidebar():
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
    ss.date_option = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", ("–í—Å—è –∏—Å—Ç–æ—Ä–∏—è", "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", "–°–µ–≥–æ–¥–Ω—è")
    )

    if ss.date_option == "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥":
        ss.start_date = st.sidebar.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", ss.df["–î–∞—Ç–∞"].min())
        ss.end_date = st.sidebar.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", ss.df["–î–∞—Ç–∞"].max())
        ss.df = ss.df[
            (ss.df["–î–∞—Ç–∞"] >= pd.to_datetime(ss.start_date))
            & (ss.df["–î–∞—Ç–∞"] <= pd.to_datetime(ss.end_date))
        ]

    elif ss.date_option == "–°–µ–≥–æ–¥–Ω—è":

        ss.df = ss.df[ss.df["–î–∞—Ç–∞"] == ss.today]

    output = io.BytesIO()

    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        ss.df["–î–∞—Ç–∞"] = ss.df["–î–∞—Ç–∞"].dt.strftime("%d.%m.%Y")
        ss.df.to_excel(writer, index=False, sheet_name="–û—Ç—á–µ—Ç")

    output.seek(0)

    report_name = (
        f"–û—Ç—á—ë—Ç {ss.start_date} - {ss.end_date}.xlsx"
        if ss.date_option == "–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥"
        else f"–û—Ç—á—ë—Ç {ss.today}"
    )
    st.sidebar.download_button(
        label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π\n\n–ø–µ—Ä–∏–æ–¥ –≤ Excel",
        data=output,
        file_name=report_name,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        type="primary",
    )


def cultures_figure():
    selected_culture = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:", sorted(ss.df["–ö—É–ª—å—Ç—É—Ä–∞"].unique())
    )
    filtered_df = ss.df[ss.df["–ö—É–ª—å—Ç—É—Ä–∞"] == selected_culture]

    if filtered_df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã.")
    else:
        agg_df = (
            filtered_df.groupby("–û–ø–µ—Ä–∞—Ü–∏—è")
            .agg({"–ó–∞ –¥–µ–Ω—å, –≥–∞": "sum", "–° –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≥–∞": "sum"})
            .reset_index()
            .melt(
                id_vars="–û–ø–µ—Ä–∞—Ü–∏—è", var_name="–¢–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è", value_name="–ü–ª–æ—â–∞–¥—å, –≥–∞"
            )
        )

        fig = px.bar(
            agg_df,
            x="–û–ø–µ—Ä–∞—Ü–∏—è",
            y="–ü–ª–æ—â–∞–¥—å, –≥–∞",
            color="–¢–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è",
            barmode="stack",
            title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã: {selected_culture}",
            text_auto=True,
            height=600,
        )
        fig.update_layout(
            xaxis_title="–û–ø–µ—Ä–∞—Ü–∏—è", yaxis_title="–ü–ª–æ—â–∞–¥—å, –≥–∞", title_x=0.5
        )
        st.plotly_chart(fig, use_container_width=True)


def operations_figure():
    operation_list = sorted(ss.df["–û–ø–µ—Ä–∞—Ü–∏—è"].unique())
    selected_operation = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:", operation_list)

    op_df = ss.df[ss.df["–û–ø–µ—Ä–∞—Ü–∏—è"] == selected_operation]
    group_op = (
        op_df.groupby("–ö—É–ª—å—Ç—É—Ä–∞")
        .agg({"–ó–∞ –¥–µ–Ω—å, –≥–∞": "sum", "–° –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≥–∞": "sum"})
        .reset_index()
        .melt(id_vars="–ö—É–ª—å—Ç—É—Ä–∞", var_name="–¢–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è", value_name="–ü–ª–æ—â–∞–¥—å, –≥–∞")
    )

    if group_op.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
    else:
        fig_op = px.bar(
            group_op,
            x="–ö—É–ª—å—Ç—É—Ä–∞",
            y="–ü–ª–æ—â–∞–¥—å, –≥–∞",
            color="–¢–∏–ø –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è",
            barmode="stack",
            title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –æ–ø–µ—Ä–∞—Ü–∏–∏: {selected_operation}",
            text_auto=True,
            height=600,
        )
        fig_op.update_layout(
            xaxis_title="–ö—É–ª—å—Ç—É—Ä–∞", yaxis_title="–ü–ª–æ—â–∞–¥—å, –≥–∞", title_x=0.5
        )
        st.plotly_chart(fig_op, use_container_width=True)


def divisions_figure():
    division_list = sorted(ss.df["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"].unique())
    selected_division = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", division_list)

    div_df = ss.df[ss.df["–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ"] == selected_division]

    group_summary = (
        div_df.groupby(["–û–ø–µ—Ä–∞—Ü–∏—è", "–ö—É–ª—å—Ç—É—Ä–∞"])["–ó–∞ –¥–µ–Ω—å, –≥–∞"].sum().reset_index()
    )
    group_summary = group_summary.fillna(0)
    group_summary = group_summary[group_summary["–ó–∞ –¥–µ–Ω—å, –≥–∞"] > 0]

    if group_summary.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é.")
    else:
        fig_summary = px.bar(
            group_summary,
            x="–û–ø–µ—Ä–∞—Ü–∏—è",
            y="–ó–∞ –¥–µ–Ω—å, –≥–∞",
            color="–ö—É–ª—å—Ç—É—Ä–∞",
            barmode="group",
            title=f"–û–±—â–∏–π –æ–±—ä—ë–º —Ä–∞–±–æ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º –∏ –∫—É–ª—å—Ç—É—Ä–∞–º ‚Äî {selected_division}",
            labels={"–ó–∞ –¥–µ–Ω—å, –≥–∞": "–ü–ª–æ—â–∞–¥—å, –≥–∞"},
            text_auto=True,
            height=600,
        )
        fig_summary.update_layout(title_x=0.5, bargap=0.0, bargroupgap=0.0)
        st.plotly_chart(fig_summary, use_container_width=True)

def manage_data():
    st.markdown(
        "**–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã**"
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º data_editor –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edited_df = st.data_editor(
        ss.df,
        use_container_width=True,
        num_rows="fixed",
        hide_index=True,
        disabled=['id']
    )
    if st.button("**–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö**", type='primary'):
        changes = edited_df.compare(ss.df)
        updates = {}

        for idx in changes.index:
            row_changes = changes.loc[idx]
            new_values = {}

            for col in edited_df.columns:
                if (col, 'self') in row_changes and (col, 'other') in row_changes:
                    new_value = row_changes[(col, 'self')]
                    old_value = row_changes[(col, 'other')]
                    if pd.notna(new_value) and new_value != old_value:
                        new_values[col] = new_value

            if new_values:
                row_id = int(edited_df.loc[idx, "id"])  # <-- –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ int
                updates[row_id] = new_values

        if updates:
            if not ss.demo:
                update_record_by_id(list(updates.keys()), list(updates.values()))
            st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', icon='‚úÖ')
            ss.df = edited_df


if __name__ == "__main__":
    st.set_page_config(page_title="–û—Ç—á—ë—Ç—ã", page_icon="üåæ")
    st.title("üìä –û—Ç—á—ë—Ç–Ω–æ—Å—Ç—å")
    load_session_state()
    if not ss.df.empty:
        create_sidebar()
        tab1, tab2, tab3, tab4 = st.tabs(
            [
                "üìù –í—Å–µ –¥–∞–Ω–Ω—ã–µ",
                "üè¢ –ì—Ä–∞—Ñ–∏–∫ –ø–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è–º",
                "üìå –ì—Ä–∞—Ñ–∏–∫ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º",
                "üå± –ì—Ä–∞—Ñ–∏–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º",
            ]
        )
        with tab1:
            manage_data()
        with tab2:
            divisions_figure()
        with tab3:
            operations_figure()
        with tab4:
            cultures_figure()
    else:
        st.warning('–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.')