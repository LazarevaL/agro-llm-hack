from __future__ import annotations

import ast
import json
import traceback
from datetime import datetime
from typing import List, Optional, Union

from pydantic import (
    BaseModel,
    Field,
    RootModel,
    ValidationError,
    field_validator,
)
from src.logger_download import logger
from src.utils import (
    MistralAPIInference,
    clean_string,
    load_entities,
    load_prompt,
)

ERROR_TEXT = "–í–∞—à –æ—Ç—á—ë—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω üò≠ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞."
allowed_entities = load_entities()


class OperationEntry(BaseModel):
    –î–∞—Ç–∞: str = Field(..., description="–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    –û–ø–µ—Ä–∞—Ü–∏—è: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    –î–∞–Ω–Ω—ã–µ: str = Field(..., description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏")
    –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: Optional[str] = None
    –ö—É–ª—å—Ç—É—Ä–∞: Optional[str] = None
    –ó–∞_–¥–µ–Ω—å_–≥–∞: Optional[Union[int, str]] = Field(None, alias="–ó–∞ –¥–µ–Ω—å, –≥–∞")
    –°_–Ω–∞—á–∞–ª–∞_–æ–ø–µ—Ä–∞—Ü–∏–∏_–≥–∞: Optional[Union[int, str]] = Field(
        None, alias="–° –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≥–∞"
    )
    –í–∞–ª_–∑–∞_–¥–µ–Ω—å_—Ü: Optional[Union[int, float, str]] = Field(
        None, alias="–í–∞–ª –∑–∞ –¥–µ–Ω—å, —Ü"
    )
    –í–∞–ª_—Å_–Ω–∞—á–∞–ª–∞_—Ü: Optional[Union[int, float, str]] = Field(
        None, alias="–í–∞–ª —Å –Ω–∞—á–∞–ª–∞, —Ü"
    )

    @field_validator("–û–ø–µ—Ä–∞—Ü–∏—è")
    def validate_operation(cls, v):

        allowed_entities["type"].append("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        if v not in allowed_entities["type"]:
            raise ValueError(f"–û–ø–µ—Ä–∞—Ü–∏—è '{v}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö.")
        return v

    @field_validator("–ö—É–ª—å—Ç—É—Ä–∞")
    def validate_culture(cls, v):
        allowed_entities["culture"].append("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        if v and v not in allowed_entities["culture"]:
            raise ValueError(f"–ö—É–ª—å—Ç—É—Ä–∞ '{v}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö.")
        return v

    @field_validator("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ")
    def validate_division(cls, v):
        allowed_entities["division"].append("–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        if v and v not in allowed_entities["division"]:
            raise ValueError(f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ '{v}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö.")
        return v


class OperationList(RootModel[List[OperationEntry]]):
    pass


class ReportBuilder:
    def __init__(self, config: dict):
        self.config = config
        self.model = MistralAPIInference(
            config_path="bot/src/configs/mistral_api.cfg.yml",
            api_key=config["mistral_api_key"],
            proxy_url=None,
        )
        self.model.set_generation_params(system_prompt=config["assistant_prompt"])

    def _correct_fields(self, report: dict) -> dict:
        logger.warning("üö© Correcting fields")
        logger.warning(report)

        prompt = load_prompt(
            "3. validation_fields.md", validation=True, report=str(report)
        )
        return self.model.predict(prompt)

    def _correct_json(self, report: str) -> dict:
        logger.warning("üö© Correcting JSON structure")
        logger.warning(report)
        prompt = load_prompt(
            "4. validation_json.md",
            validation=True,
            report=report,
        )
        return self.model.predict(prompt, report)

    def _validate(self, reports: str) -> dict:
        try:
            cleaned = clean_string(reports)

            if "–û—Ç—á—ë—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω." in cleaned:
                raise ValueError("Poor quality data, nothing to extract")

            parsed = json.loads(cleaned)
            if isinstance(parsed, list):
                parsed = [
                    json.loads(clean_string(item)) if isinstance(item, str) else item
                    for item in parsed
                ]
            for item in parsed:
                try:
                    parsed_date = datetime.fromisoformat(item["–î–∞—Ç–∞"])
                    item["–î–∞—Ç–∞"] = parsed_date.strftime("%d.%m.%Y")
                except ValueError:
                    pass

            return OperationList.model_validate(parsed).model_dump(exclude_none=True)

        except ValidationError:
            correction = self._correct_fields(parsed)
            return OperationList.model_validate(
                ast.literal_eval(clean_string(correction))
            ).model_dump(exclude_none=True)

        except json.decoder.JSONDecodeError:
            correction = self._correct_json(reports)
            return OperationList.model_validate(
                ast.literal_eval(clean_string(correction))
            ).model_dump(exclude_none=True)

        except Exception:
            logger.error("Unexpected error:")
            logger.error(traceback.format_exc())
            raise

    def _gather_raw_results(self, prompt: str, report_data: list[dict]) -> list[str]:
        reports = []
        for report in report_data:
            raw_report = self.model.predict(prompt, str(report))
            reports.append(raw_report)
        return reports

    def _process_stage(
        self,
        report_data: Union[list[dict], str],
        prompt_path: str,
        initial=False,
    ) -> list[dict]:
        if initial:
            prompt = load_prompt(prompt_path, definition=True)
            reports = self.model.predict(prompt, report_data)
            logger.info(reports)
            return self._validate(reports)

        prompt = load_prompt(prompt_path, definition=False)
        reports = self._gather_raw_results(prompt, report_data)
        return self._validate(
            json.dumps(reports, ensure_ascii=False, indent=2, sort_keys=False)
        )

    def build(self, report_data: str) -> list[dict]:
        processing_steps = [
            (
                "1. initial.md",
                "–î–∞—Ç–∞, –æ–ø–µ—Ä–∞—Ü–∏—è, –∫—É–ª—å—Ç—É—Ä–∞",
                True,
            ),
            ("2. final.md", "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", False),
        ]

        result = report_data
        for prompt_path, field, initial in processing_steps:
            logger.info(f"Processing step: {field}")
            result = self._process_stage(result, prompt_path, initial)

        try:
            for item in result:
                item["–ó–∞ –¥–µ–Ω—å, –≥–∞"] = item.pop("–ó–∞_–¥–µ–Ω—å_–≥–∞")
                item["–° –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≥–∞"] = item.pop("–°_–Ω–∞—á–∞–ª–∞_–æ–ø–µ—Ä–∞—Ü–∏–∏_–≥–∞")
                item["–í–∞–ª –∑–∞ –¥–µ–Ω—å, —Ü"] = item.pop("–í–∞–ª_–∑–∞_–¥–µ–Ω—å_—Ü")
                item["–í–∞–ª —Å –Ω–∞—á–∞–ª–∞, —Ü"] = item.pop("–í–∞–ª_—Å_–Ω–∞—á–∞–ª–∞_—Ü")

            return result
        except Exception:
            return ERROR_TEXT
